export default {
  title: 'Dandiset',
  description: 'A body of structured information describing a DANDI dataset.',
  type: 'object',
  properties: {
    id: {
      title: 'ID',
      description: 'Uniform resource identifier',
      pattern: '^(dandi|DANDI):\\d{6}(/(draft|\\d+\\.\\d+\\.\\d+))$',
      readOnly: true,
      type: 'string',
    },
    schemaKey: {
      title: 'Schema Key',
      default: 'Dandiset',
      type: 'string',
      const: 'Dandiset',
    },
    schemaVersion: {
      title: 'Schema Version',
      default: '0.6.0',
      readOnly: true,
      nskey: 'schema',
      type: 'string',
    },
    name: {
      title: 'Dandiset title',
      description: 'A title associated with the Dandiset.',
      maxLength: 150,
      nskey: 'schema',
      type: 'string',
    },
    description: {
      title: 'Description',
      description: 'A description of the Dandiset',
      maxLength: 3000,
      nskey: 'schema',
      type: 'string',
      'x-display': 'custom-tiptap',
    },
    contributor: {
      title: 'Dandiset contributors',
      description: 'People or Organizations that have contributed to this Dandiset.',
      nskey: 'schema',
      minItems: 1,
      type: 'array',
      items: {
        anyOf: [
          {
            $ref: '#/definitions/Person',
          },
          {
            $ref: '#/definitions/Organization',
          },
        ],
        type: 'object',
      },
    },
    about: {
      title: 'Subject matter of the dataset',
      description: 'The subject matter of the content, such as disorders, brain anatomy.',
      nskey: 'schema',
      type: 'array',
      items: {
        anyOf: [
          {
            $ref: '#/definitions/Disorder',
          },
          {
            $ref: '#/definitions/Anatomy',
          },
          {
            $ref: '#/definitions/GenericType',
          },
        ],
        type: 'object',
      },
    },
    studyTarget: {
      title: 'Study Target',
      description: 'Objectives or specific questions of the study.',
      nskey: 'dandi',
      type: 'array',
      items: {
        type: 'string',
      },
    },
    license: {
      description: 'Licenses associated with the item. DANDI only supports a subset of Creative Commons Licenses (creativecommons.org) applicable to datasets.',
      nskey: 'schema',
      type: 'array',
      items: {
        $ref: '#/definitions/LicenseType',
      },
      minItems: 1,
      title: 'License',
    },
    protocol: {
      title: 'Protocol',
      description: 'A list of persistent URLs describing the protocol (e.g. protocols.io, or other DOIs).',
      nskey: 'dandi',
      type: 'array',
      items: {
        type: 'string',
        minLength: 1,
        maxLength: 2083,
        format: 'uri',
      },
    },
    ethicsApproval: {
      title: 'Ethics approvals',
      nskey: 'dandi',
      type: 'array',
      items: {
        $ref: '#/definitions/EthicsApproval',
      },
    },
    keywords: {
      title: 'Keywords',
      description: 'Keywords used to describe this content.',
      nskey: 'schema',
      type: 'array',
      items: {
        type: 'string',
      },
    },
    acknowledgement: {
      title: 'Acknowledgement',
      descriptions: 'Any acknowledgments not covered by contributors or external resources.',
      nskey: 'dandi',
      type: 'string',
    },
    access: {
      title: 'Access information',
      nskey: 'dandi',
      type: 'array',
      items: {
        $ref: '#/definitions/AccessRequirements',
      },
    },
    url: {
      title: 'URL',
      description: 'permalink to the item',
      readOnly: true,
      nskey: 'schema',
      minLength: 1,
      maxLength: 1000,
      format: 'uri',
      type: 'string',
    },
    repository: {
      title: 'Repository',
      description: 'location of the item',
      default: 'https://dandiarchive.org/',
      readOnly: true,
      nskey: 'dandi',
      minLength: 1,
      maxLength: 1000,
      format: 'uri',
      type: 'string',
    },
    relatedResource: {
      title: 'Related Resource',
      nskey: 'dandi',
      type: 'array',
      items: {
        $ref: '#/definitions/Resource',
      },
    },
    wasGeneratedBy: {
      title: 'Associated projects',
      description: 'Project(s) that generated this Dandiset.',
      nskey: 'prov',
      type: 'array',
      items: {
        $ref: '#/definitions/Project',
      },
    },
    identifier: {
      title: 'Dandiset identifier',
      description: 'A Dandiset identifier that can be resolved by identifiers.org.',
      pattern: '^DANDI\\:\\d{6}$',
      readOnly: true,
      nskey: 'schema',
      type: 'string',
    },
    dateCreated: {
      title: 'Dandiset creation date and time.',
      nskey: 'schema',
      readOnly: true,
      type: 'string',
      format: 'date-time',
    },
    dateModified: {
      title: 'Last modification date and time.',
      nskey: 'schema',
      readOnly: true,
      type: 'string',
      format: 'date-time',
    },
    citation: {
      title: 'Citation',
      readOnly: true,
      nskey: 'schema',
      type: 'string',
    },
    assetsSummary: {
      title: 'Assets Summary',
      readOnly: true,
      nskey: 'dandi',
      $ref: '#/definitions/AssetsSummary',
    },
    manifestLocation: {
      title: 'Manifest Location',
      readOnly: true,
      nskey: 'dandi',
      minItems: 1,
      type: 'array',
      items: {
        type: 'string',
        minLength: 1,
        maxLength: 2083,
        format: 'uri',
      },
    },
    version: {
      title: 'Version',
      readOnly: true,
      nskey: 'schema',
      type: 'string',
    },
  },
  required: [
    'id',
    'name',
    'description',
    'contributor',
    'license',
    'identifier',
    'citation',
    'assetsSummary',
    'manifestLocation',
    'version',
    'schemaKey',
  ],
  definitions: {
    RoleType: {
      title: 'RoleType',
      description: 'An enumeration of roles',
      enum: [
        'dcite:Author',
        'dcite:Conceptualization',
        'dcite:ContactPerson',
        'dcite:DataCollector',
        'dcite:DataCurator',
        'dcite:DataManager',
        'dcite:FormalAnalysis',
        'dcite:FundingAcquisition',
        'dcite:Investigation',
        'dcite:Maintainer',
        'dcite:Methodology',
        'dcite:Producer',
        'dcite:ProjectLeader',
        'dcite:ProjectManager',
        'dcite:ProjectMember',
        'dcite:ProjectAdministration',
        'dcite:Researcher',
        'dcite:Resources',
        'dcite:Software',
        'dcite:Supervision',
        'dcite:Validation',
        'dcite:Visualization',
        'dcite:Funder',
        'dcite:Sponsor',
        'dcite:StudyParticipant',
        'dcite:Affiliation',
        'dcite:EthicsApproval',
        'dcite:Other',
      ],
    },
    Affiliation: {
      title: 'Affiliation',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Affiliation',
          type: 'string',
          const: 'Affiliation',
        },
        identifier: {
          title: 'A ror.org identifier',
          description: 'Use an ror.org identifier for institutions.',
          pattern: '^https://ror.org/[a-z0-9]+$',
          nskey: 'schema',
          type: 'string',
          format: 'uri',
          maxLength: 1000,
        },
        name: {
          title: 'Name',
          description: 'Name of organization',
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'name',
        'schemaKey',
      ],
    },
    Person: {
      title: 'Person',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Person',
          type: 'string',
          const: 'Person',
        },
        identifier: {
          title: 'An ORCID identifier',
          description: 'An ORCID (orcid.org) identifier for an individual.',
          pattern: '^\\d{4}-\\d{4}-\\d{4}-(\\d{3}X|\\d{4})$',
          nskey: 'schema',
          type: 'string',
        },
        name: {
          title: 'Name',
          description: 'Use the format: familyname, given names ...',
          nskey: 'schema',
          examples: [
            'Lovelace, Augusta Ada',
            'Smith, John',
            'Chan, Kong-sang',
          ],
          type: 'string',
        },
        email: {
          title: 'Email',
          nskey: 'schema',
          type: 'string',
          format: 'email',
        },
        url: {
          title: 'URL',
          nskey: 'schema',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
          type: 'string',
        },
        roleName: {
          title: 'Role',
          description: 'Role(s) of the contributor. Multiple roles can be selected.',
          nskey: 'schema',
          type: 'array',
          items: {
            $ref: '#/definitions/RoleType',
          },
        },
        includeInCitation: {
          title: 'Include contributor in citation',
          description: 'A flag to indicate whether a contributor should be included when generating a citation for the item.',
          default: true,
          nskey: 'dandi',
          type: 'boolean',
        },
        awardNumber: {
          title: 'Identifier for an award',
          description: 'Identifier associated with a sponsored or gift award.',
          nskey: 'dandi',
          type: 'string',
        },
        affiliation: {
          title: 'Affiliation',
          description: 'An organization that this person is affiliated with.',
          nskey: 'schema',
          type: 'array',
          items: {
            $ref: '#/definitions/Affiliation',
          },
        },
      },
      required: [
        'name',
        'schemaKey',
      ],
    },
    ContactPoint: {
      title: 'Contact Point',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'ContactPoint',
          type: 'string',
          const: 'ContactPoint',
        },
        email: {
          title: 'Email',
          description: 'Email address of contact.',
          nskey: 'schema',
          type: 'string',
          format: 'email',
        },
        url: {
          title: 'URL',
          description: 'A Web page to find information on how to contact.',
          nskey: 'schema',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
          type: 'string',
        },
      },
      required: [
        'schemaKey',
      ],
    },
    Organization: {
      title: 'Organization',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Organization',
          type: 'string',
          const: 'Organization',
        },
        identifier: {
          title: 'A ror.org identifier',
          description: 'Use an ror.org identifier for institutions.',
          pattern: '^https://ror.org/[a-z0-9]+$',
          nskey: 'schema',
          type: 'string',
          format: 'uri',
          maxLength: 1000,
        },
        name: {
          title: 'Name',
          nskey: 'schema',
          type: 'string',
        },
        email: {
          title: 'Email',
          nskey: 'schema',
          type: 'string',
          format: 'email',
        },
        url: {
          title: 'URL',
          nskey: 'schema',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
          type: 'string',
        },
        roleName: {
          title: 'Role',
          description: 'Role(s) of the contributor. Multiple roles can be selected.',
          nskey: 'schema',
          type: 'array',
          items: {
            $ref: '#/definitions/RoleType',
          },
        },
        includeInCitation: {
          title: 'Include contributor in citation',
          description: 'A flag to indicate whether a contributor should be included when generating a citation for the item',
          default: false,
          nskey: 'dandi',
          type: 'boolean',
        },
        awardNumber: {
          title: 'Identifier for an award',
          description: 'Identifier associated with a sponsored or gift award.',
          nskey: 'dandi',
          type: 'string',
        },
        contactPoint: {
          title: 'Organization contact information',
          description: 'Contact for the organization',
          nskey: 'schema',
          type: 'array',
          items: {
            $ref: '#/definitions/ContactPoint',
          },
        },
      },
      required: [
        'schemaKey',
      ],
    },
    Disorder: {
      title: 'Disorder',
      description: 'Biolink, SNOMED, or other identifier for disorder studied',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Disorder',
          type: 'string',
          const: 'Disorder',
        },
        identifier: {
          title: 'Identifier',
          description: 'The identifier can be any url or a compact URI, preferably supported by identifiers.org.',
          nskey: 'schema',
          type: 'string',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
        },
        name: {
          title: 'Name',
          description: 'The name of the item.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
        dxdate: {
          title: 'Dates of diagnosis',
          description: 'Dates of diagnosis',
          nskey: 'dandi',
          rangeIncludes: 'schema:Date',
          type: 'array',
          items: {
            anyOf: [
              {
                type: 'string',
                format: 'date',
              },
              {
                type: 'string',
                format: 'date-time',
              },
            ],
          },
        },
      },
      required: [
        'schemaKey',
      ],
    },
    Anatomy: {
      title: 'Anatomy',
      description: 'UBERON or other identifier for anatomical part studied',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Anatomy',
          type: 'string',
          const: 'Anatomy',
        },
        identifier: {
          title: 'Identifier',
          description: 'The identifier can be any url or a compact URI, preferably supported by identifiers.org.',
          nskey: 'schema',
          type: 'string',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
        },
        name: {
          title: 'Name',
          description: 'The name of the item.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'schemaKey',
      ],
    },
    GenericType: {
      title: 'Generic Type',
      description: 'An object to capture any type for about',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'GenericType',
          type: 'string',
          const: 'GenericType',
        },
        identifier: {
          title: 'Identifier',
          description: 'The identifier can be any url or a compact URI, preferably supported by identifiers.org.',
          nskey: 'schema',
          type: 'string',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
        },
        name: {
          title: 'Name',
          description: 'The name of the item.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'schemaKey',
      ],
    },
    LicenseType: {
      title: 'LicenseType',
      description: 'An enumeration of supported licenses',
      enum: [
        'spdx:CC0-1.0',
        'spdx:CC-BY-4.0',
      ],
    },
    EthicsApproval: {
      title: 'Ethics Approval',
      description: 'Information about ethics committee approval for project',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'EthicsApproval',
          type: 'string',
          const: 'EthicsApproval',
        },
        identifier: {
          title: 'Approved protocol identifier',
          description: 'Approved Protocol identifier, often a number or alphanumeric string.',
          nskey: 'schema',
          type: 'string',
        },
        contactPoint: {
          title: 'Contact Point',
          description: 'Information about the ethics approval committee.',
          nskey: 'schema',
          $ref: '#/definitions/ContactPoint',
        },
      },
      required: [
        'identifier',
        'schemaKey',
      ],
    },
    AccessType: {
      title: 'AccessType',
      description: 'An enumeration of access status options',
      enum: [
        'dandi:OpenAccess',
      ],
    },
    AccessRequirements: {
      title: 'Access Requirements',
      description: 'Information about access options for the dataset',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'AccessRequirements',
          type: 'string',
          const: 'AccessRequirements',
        },
        status: {
          title: 'Access status',
          description: 'The access status of the item.',
          nskey: 'dandi',
          $ref: '#/definitions/AccessType',
        },
        contactPoint: {
          title: 'Contact Point',
          description: 'Who or where to look for information about access.',
          nskey: 'schema',
          $ref: '#/definitions/ContactPoint',
        },
        description: {
          title: 'Description',
          description: 'Information about access requirements when embargoed or restricted',
          nskey: 'schema',
          type: 'string',
        },
        embargoedUntil: {
          title: 'Embargo end date',
          description: 'Date on which embargo ends.',
          readOnly: true,
          nskey: 'dandi',
          rangeIncludes: 'schema:Date',
          type: 'string',
          format: 'date',
        },
      },
      required: [
        'status',
        'schemaKey',
      ],
    },
    RelationType: {
      title: 'RelationType',
      description: 'An enumeration of resource relations',
      enum: [
        'dcite:IsCitedBy',
        'dcite:Cites',
        'dcite:IsSupplementTo',
        'dcite:IsSupplementedBy',
        'dcite:IsContinuedBy',
        'dcite:Continues',
        'dcite:Describes',
        'dcite:IsDescribedBy',
        'dcite:HasMetadata',
        'dcite:IsMetadataFor',
        'dcite:HasVersion',
        'dcite:IsVersionOf',
        'dcite:IsNewVersionOf',
        'dcite:IsPreviousVersionOf',
        'dcite:IsPartOf',
        'dcite:HasPart',
        'dcite:IsReferencedBy',
        'dcite:References',
        'dcite:IsDocumentedBy',
        'dcite:Documents',
        'dcite:IsCompiledBy',
        'dcite:Compiles',
        'dcite:IsVariantFormOf',
        'dcite:IsOriginalFormOf',
        'dcite:IsIdenticalTo',
        'dcite:IsReviewedBy',
        'dcite:Reviews',
        'dcite:IsDerivedFrom',
        'dcite:IsSourceOf',
        'dcite:IsRequiredBy',
        'dcite:Requires',
        'dcite:Obsoletes',
        'dcite:IsObsoletedBy',
        'dcite:IsPublishedIn',
      ],
    },
    Resource: {
      title: 'Resource',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Resource',
          type: 'string',
          const: 'Resource',
        },
        identifier: {
          title: 'Identifier',
          nskey: 'schema',
          type: 'string',
        },
        name: {
          title: 'A title of the resource',
          nskey: 'schema',
          type: 'string',
        },
        url: {
          title: 'URL of the resource',
          nskey: 'schema',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
          type: 'string',
        },
        repository: {
          title: 'Name of the repository',
          description: 'Name of the repository in which the resource is housed.',
          nskey: 'dandi',
          type: 'string',
        },
        relation: {
          title: 'Resource relation',
          description: 'Indicates how the resource is related to the dataset. This relation should satisfy: dandiset <relation> resource.',
          nskey: 'dandi',
          $ref: '#/definitions/RelationType',
        },
      },
      required: [
        'relation',
        'schemaKey',
      ],
    },
    Software: {
      title: 'Software',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Software',
          type: 'string',
          const: 'Software',
        },
        identifier: {
          title: 'Research resource identifier',
          description: 'RRID of the software from scicrunch.org.',
          pattern: '^RRID\\:.*',
          nskey: 'schema',
          type: 'string',
        },
        name: {
          title: 'Name',
          nskey: 'schema',
          type: 'string',
        },
        version: {
          title: 'Version',
          nskey: 'schema',
          type: 'string',
        },
        url: {
          title: 'URL',
          description: 'Web page for the software.',
          nskey: 'schema',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
          type: 'string',
        },
      },
      required: [
        'name',
        'version',
        'schemaKey',
      ],
    },
    Agent: {
      title: 'Agent',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Agent',
          type: 'string',
          const: 'Agent',
        },
        identifier: {
          title: 'Identifier',
          description: 'Identifier for an agent.',
          nskey: 'schema',
          type: 'string',
        },
        name: {
          title: 'Name',
          nskey: 'schema',
          type: 'string',
        },
        url: {
          title: 'URL',
          nskey: 'schema',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
          type: 'string',
        },
      },
      required: [
        'name',
        'schemaKey',
      ],
    },
    Equipment: {
      title: 'Equipment',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Equipment',
          type: 'string',
          const: 'Equipment',
        },
        identifier: {
          title: 'Identifier',
          nskey: 'schema',
          type: 'string',
        },
        name: {
          title: 'Title',
          description: 'A name for the equipment.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
        description: {
          title: 'Description',
          description: 'The description of the equipment.',
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'name',
        'schemaKey',
      ],
    },
    Project: {
      title: 'Project',
      description: 'Information about the Project activity',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'Project',
          type: 'string',
          const: 'Project',
        },
        identifier: {
          title: 'Identifier',
          nskey: 'schema',
          type: 'string',
        },
        name: {
          title: 'Name of project',
          description: 'The name of the project that generated this Dandiset or asset.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
        description: {
          title: 'Description',
          description: 'A brief description of the project.',
          nskey: 'schema',
          type: 'string',
        },
        startDate: {
          title: 'Start Date',
          nskey: 'schema',
          type: 'string',
          format: 'date-time',
        },
        endDate: {
          title: 'End Date',
          nskey: 'schema',
          type: 'string',
          format: 'date-time',
        },
        wasAssociatedWith: {
          title: 'Was Associated with',
          nskey: 'prov',
          type: 'array',
          items: {
            anyOf: [
              {
                $ref: '#/definitions/Person',
              },
              {
                $ref: '#/definitions/Organization',
              },
              {
                $ref: '#/definitions/Software',
              },
              {
                $ref: '#/definitions/Agent',
              },
            ],
            type: 'object',
          },
        },
        used: {
          title: 'Used',
          description: 'A listing of equipment used for the activity.',
          nskey: 'prov',
          type: 'array',
          items: {
            $ref: '#/definitions/Equipment',
          },
        },
      },
      required: [
        'name',
        'schemaKey',
      ],
    },
    StandardsType: {
      title: 'Standards Type',
      description: 'Identifier for data standard used',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'StandardsType',
          type: 'string',
          const: 'StandardsType',
        },
        identifier: {
          title: 'Identifier',
          description: 'The identifier can be any url or a compact URI, preferably supported by identifiers.org.',
          nskey: 'schema',
          type: 'string',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
        },
        name: {
          title: 'Name',
          description: 'The name of the item.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'schemaKey',
      ],
    },
    ApproachType: {
      title: 'Approach Type',
      description: 'Identifier for approach used',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'ApproachType',
          type: 'string',
          const: 'ApproachType',
        },
        identifier: {
          title: 'Identifier',
          description: 'The identifier can be any url or a compact URI, preferably supported by identifiers.org.',
          nskey: 'schema',
          type: 'string',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
        },
        name: {
          title: 'Name',
          description: 'The name of the item.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'schemaKey',
      ],
    },
    MeasurementTechniqueType: {
      title: 'Measurement Technique Type',
      description: 'Identifier for measurement technique used',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'MeasurementTechniqueType',
          type: 'string',
          const: 'MeasurementTechniqueType',
        },
        identifier: {
          title: 'Identifier',
          description: 'The identifier can be any url or a compact URI, preferably supported by identifiers.org.',
          nskey: 'schema',
          type: 'string',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
        },
        name: {
          title: 'Name',
          description: 'The name of the item.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'schemaKey',
      ],
    },
    SpeciesType: {
      title: 'Species Type',
      description: 'Identifier for species of the sample',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'SpeciesType',
          type: 'string',
          const: 'SpeciesType',
        },
        identifier: {
          title: 'Identifier',
          description: 'The identifier can be any url or a compact URI, preferably supported by identifiers.org.',
          nskey: 'schema',
          type: 'string',
          minLength: 1,
          maxLength: 1000,
          format: 'uri',
        },
        name: {
          title: 'Name',
          description: 'The name of the item.',
          maxLength: 150,
          nskey: 'schema',
          type: 'string',
        },
      },
      required: [
        'schemaKey',
      ],
    },
    AssetsSummary: {
      title: 'Assets Summary',
      description: 'Summary over assets contained in a dandiset (published or not)',
      type: 'object',
      properties: {
        id: {
          title: 'ID',
          description: 'Uniform resource identifier',
          readOnly: true,
          type: 'string',
        },
        schemaKey: {
          title: 'Schema Key',
          default: 'AssetsSummary',
          type: 'string',
          const: 'AssetsSummary',
        },
        numberOfBytes: {
          title: 'Number of Bytes',
          readOnly: true,
          sameas: 'schema:contentSize',
          type: 'integer',
        },
        numberOfFiles: {
          title: 'Number of Files',
          readOnly: true,
          type: 'integer',
        },
        numberOfSubjects: {
          title: 'Number of Subjects',
          readOnly: true,
          type: 'integer',
        },
        numberOfSamples: {
          title: 'Number of Samples',
          readOnly: true,
          type: 'integer',
        },
        numberOfCells: {
          title: 'Number of Cells',
          readOnly: true,
          type: 'integer',
        },
        dataStandard: {
          title: 'Data Standard',
          readOnly: true,
          type: 'array',
          items: {
            $ref: '#/definitions/StandardsType',
          },
        },
        approach: {
          title: 'Approach',
          readOnly: true,
          type: 'array',
          items: {
            $ref: '#/definitions/ApproachType',
          },
        },
        measurementTechnique: {
          title: 'Measurement Technique',
          readOnly: true,
          nskey: 'schema',
          type: 'array',
          items: {
            $ref: '#/definitions/MeasurementTechniqueType',
          },
        },
        variableMeasured: {
          title: 'Variable Measured',
          readOnly: true,
          nskey: 'schema',
          type: 'array',
          items: {
            type: 'string',
          },
        },
        species: {
          title: 'Species',
          readOnly: true,
          type: 'array',
          items: {
            $ref: '#/definitions/SpeciesType',
          },
        },
      },
      required: [
        'numberOfBytes',
        'numberOfFiles',
        'schemaKey',
      ],
    },
  },
};
